'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Noven = require('./noven.js');

function createPage(options) {
  var params = {};
  params.$options = options;

  //在页面渲染之前，初始化一些配置信息，如登录拦截，methods拦截等
  initConfig(options);

  params.onLoad = function (query) {
    //初始化vue
    initNvm(this, options);
    //执行生命周期的onLoad
    if (options.onLoad) options.onLoad.call(this, query);
  };

  params.onReady = function () {
    if (options.onReady) options.onReady.call(this);
  };

  Page(params);
}

function initNvm(wxPage, options) {
  var nvm = new Noven(options);
  nvm.$wxPage = wxPage;
  nvm.$options = options;

  //初始化首屏数据
  initState(nvm);
  //初始化所有事件
  initMethods(nvm);

  nvm.$watch(function () {
    return getLastData(nvm, options);
  }, function (nv, ov) {
    wxPage.setData(nv);
  });
}

function initState(nvm) {
  var $wxPage = nvm.$wxPage,
      $options = nvm.$options;

  $wxPage.setData(getLastData(nvm, $options));
}

function initMethods(nvm) {
  var methods = nvm.$options.methods;


  if (!methods) return;
  Object.entries(methods).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    Object.defineProperty(nvm.$wxPage, key, {
      enumerable: true,
      configurable: false,
      get: function get() {
        return nvm[key];
      }
    });
  });
}

function initConfig(options) {
  var config = options.config,
      _options$methods = options.methods,
      methods = _options$methods === undefined ? {} : _options$methods;


  if (!config) return;

  var vModel = config.vModel;

  //初始化input框的双向数据绑定，实质就是自动添加对应的bindinput
  //如v-model="hello"，则自动生成一个method: set_hello
  //只接受一层vmodel， this.hello.world是不允许的

  if (vModel) {
    vModel.forEach(function (model) {
      //如果methods里有同名方法，以methods为准
      if (methods['set_' + model]) return;

      methods['set_' + model] = function (e) {
        this[model] = e.detail.value;
      };
    });
  }
}

function getLastData(nvm, options) {
  var keys = [];
  var obj = {};

  var data = options.data,
      computed = options.computed;

  if (data) keys.push.apply(keys, _toConsumableArray(Object.keys(data)));
  if (computed) keys.push.apply(keys, _toConsumableArray(Object.keys(computed)));

  keys.forEach(function (key) {
    return obj[key] = nvm[key];
  });
  return obj;
}

function diff(nv, ov) {
  console.log(nv, ov);
  //先移除每个节点的__dep
}

module.exports = createPage;
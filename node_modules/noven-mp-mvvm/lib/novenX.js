'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Noven = require('./noven.js');

module.exports = function () {
	function Store(options) {
		var _this2 = this;

		_classCallCheck(this, Store);

		//挂载到Noven身上
		if (!Noven) return;
		this.$options = options;
		//保存所有action
		this._actionsSubscribers = {};
		//保存所有mutation
		this._mutationsSubscribers = {};
		//不允许直接修改vuex中的值
		this.$committing = false;

		var _this = this;
		var init = Noven.prototype.init;
		Noven.prototype.init = function (nvmOptions) {
			if (Object.keys(nvmOptions).includes('store')) {
				this.$store = _this;
			}

			init.call(this);
		};

		//执行store的初始化工作
		this.initState();

		//初始化所有actions 和 mutations
		this.initMethods();

		//不允许直接修改state的值
		var nvm = this._nvm;
		this._nvm.$watch(function () {
			return { name: nvm.$data };
		}, function (nv) {
			if (!_this2.$committing) {
				console.warn('只能通过commit修改state的值');
			}
		}, {
			deep: true
		});
	}

	//Store的state实际上就是一个Vue实例，也就是Noven实例
	//这个实例只具备data和computed（实际上对应vuex中的getters）


	_createClass(Store, [{
		key: 'initState',
		value: function initState() {
			var _this3 = this;

			var _$options = this.$options,
			    _$options$state = _$options.state,
			    data = _$options$state === undefined ? {} : _$options$state,
			    _$options$computed = _$options.computed,
			    computed = _$options$computed === undefined ? {} : _$options$computed;


			this._nvm = new Noven({
				data: data,
				computed: computed
			});

			//代理一下，将 $options中配置的所有的state和computed都代理到this.$store
			//可以通过 this.$store.xxx 来访问 this.$store._nvm 
			function defineReactive(obj, key) {
				Object.defineProperty(obj, key, {
					enumerable: true,
					configurable: true,
					get: function get() {
						return this._nvm[key];
					},
					set: function set(nv) {
						this._nvm[key] = nv;
					}
				});
			}

			Object.keys(data).forEach(function (key) {
				return defineReactive(_this3, key);
			});
			Object.keys(computed).forEach(function (key) {
				return defineReactive(_this3, key);
			});
		}

		//初始化所有actions 和 mutations

	}, {
		key: 'initMethods',
		value: function initMethods() {
			var _$options2 = this.$options,
			    _$options2$actions = _$options2.actions,
			    actions = _$options2$actions === undefined ? {} : _$options2$actions,
			    _$options2$mutations = _$options2.mutations,
			    mutations = _$options2$mutations === undefined ? {} : _$options2$mutations;

			var _this = this;

			//工厂模式
			function factory(server, name) {
				if (!Object.prototype.toString.call(server).includes('Object')) return;
				Object.entries(server).forEach(function (_ref) {
					var _ref2 = _slicedToArray(_ref, 2),
					    key = _ref2[0],
					    value = _ref2[1];

					if (name !== '_actions')
						//mutation
						_this[name + 'Subscribers'][key] = function () {
							return value.call.apply(value, [_this].concat(Array.prototype.slice.call(arguments)));
						};else
						//action
						_this[name + 'Subscribers'][key] = function () {
							var _arguments = arguments;

							return Promise.resolve().then(function () {
								return value.call.apply(value, [_this].concat(Array.prototype.slice.call(_arguments)));
							});
						};
				});
			}

			factory(actions, '_actions');
			factory(mutations, '_mutations');
		}

		//触发actions

	}, {
		key: 'dispatch',
		value: function dispatch(actionName, params) {
			if (!actionName) {
				console.warn('dispatch要触发的action不能为空！');
				return;
			}

			var action = this._actionsSubscribers[actionName];

			if (!action) {
				console.warn('action[' + actionName + ']\u4E0D\u5B58\u5728\uFF01');
				return;
			}

			action(params);
		}

		//触发mutations

	}, {
		key: 'commit',
		value: function commit(mutationName, params) {
			if (!mutationName) {
				console.warn('commit要触发的mutation不能为空！');
				return;
			}

			var mutation = this._mutationsSubscribers[mutationName];

			if (!mutation) {
				console.warn('mutation[' + mutationName + ']\u4E0D\u5B58\u5728\uFF01');
				return;
			}

			//只有mutation才允许改变state
			this.$committing = true;
			mutation(params);
			this.$committing = false;
		}
	}]);

	return Store;
}();